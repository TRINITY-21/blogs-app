# Generated by Django 3.2.12 on 2022-08-02 14:13

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import story.blocks
import wagtail.core.blocks
import wagtail.core.fields


class Migration(migrations.Migration):

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
        ('wagtailimages', '0023_add_choose_permissions'),
        ('story', '0002_storylistingspage'),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.CharField(blank=True, max_length=100, null=True)),
                ('lastname', models.CharField(blank=True, max_length=100, null=True)),
                ('job_title', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name': '  Story Author',
                'verbose_name_plural': 'Story Authors',
            },
        ),
        migrations.CreateModel(
            name='CoAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('co_firstname', models.CharField(blank=True, max_length=100, null=True)),
                ('co_lastname', models.CharField(blank=True, max_length=100, null=True)),
                ('co_job_title', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name': '  Story Co-Author',
                'verbose_name_plural': 'Story Co-Authors',
            },
        ),
        migrations.CreateModel(
            name='PrimaryTag',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('taggit.tag',),
        ),
        migrations.CreateModel(
            name='SecondaryTag',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('taggit.tag',),
        ),
        migrations.AddField(
            model_name='storypage',
            name='body',
            field=wagtail.core.fields.StreamField([('h1', wagtail.core.blocks.CharBlock()), ('h2', wagtail.core.blocks.CharBlock()), ('paragraph', wagtail.core.blocks.RichTextBlock()), ('image_text', wagtail.core.blocks.StructBlock([('reverse', wagtail.core.blocks.BooleanBlock(required=False)), ('text', wagtail.core.blocks.RichTextBlock()), ('image', story.blocks.CustomImageChooserBlock(rendition='width-800'))])), ('image_carousel', wagtail.core.blocks.ListBlock(story.blocks.CustomImageChooserBlock())), ('thumbnail_gallery', wagtail.core.blocks.ListBlock(story.blocks.CustomImageChooserBlock()))], blank=True, null=True),
        ),
        migrations.AddField(
            model_name='storypage',
            name='custom_title',
            field=models.CharField(blank=True, help_text='Overwrites the default title', max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='storypage',
            name='featured_image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image'),
        ),
        migrations.AddField(
            model_name='storypage',
            name='summary',
            field=models.CharField(blank=True, help_text='Overwrites the default title', max_length=100, null=True),
        ),
        migrations.CreateModel(
            name='StoryPageSecondaryTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='secondarystory_tags', to='story.storypage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='story_storypagesecondarytag_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StoryPagePrimaryTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='primarystory_tags', to='story.storypage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='story_storypageprimarytag_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='storypage',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='story.author'),
        ),
        migrations.AddField(
            model_name='storypage',
            name='co_author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='story.coauthor'),
        ),
        migrations.AddField(
            model_name='storypage',
            name='primary_tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', related_name='primary_tags', through='story.StoryPagePrimaryTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='storypage',
            name='secondary_tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', related_name='secondary_tags', through='story.StoryPageSecondaryTag', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
